/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UberRequest } from "./UberRequest";
import { UberRequestCountArgs } from "./UberRequestCountArgs";
import { UberRequestFindManyArgs } from "./UberRequestFindManyArgs";
import { UberRequestFindUniqueArgs } from "./UberRequestFindUniqueArgs";
import { CreateUberRequestArgs } from "./CreateUberRequestArgs";
import { UpdateUberRequestArgs } from "./UpdateUberRequestArgs";
import { DeleteUberRequestArgs } from "./DeleteUberRequestArgs";
import { Job } from "../../job/base/Job";
import { UberRequestService } from "../uberRequest.service";
@graphql.Resolver(() => UberRequest)
export class UberRequestResolverBase {
  constructor(protected readonly service: UberRequestService) {}

  async _uberRequestsMeta(
    @graphql.Args() args: UberRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UberRequest])
  async uberRequests(
    @graphql.Args() args: UberRequestFindManyArgs
  ): Promise<UberRequest[]> {
    return this.service.uberRequests(args);
  }

  @graphql.Query(() => UberRequest, { nullable: true })
  async uberRequest(
    @graphql.Args() args: UberRequestFindUniqueArgs
  ): Promise<UberRequest | null> {
    const result = await this.service.uberRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UberRequest)
  async createUberRequest(
    @graphql.Args() args: CreateUberRequestArgs
  ): Promise<UberRequest> {
    return await this.service.createUberRequest({
      ...args,
      data: {
        ...args.data,

        job: args.data.job
          ? {
              connect: args.data.job,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UberRequest)
  async updateUberRequest(
    @graphql.Args() args: UpdateUberRequestArgs
  ): Promise<UberRequest | null> {
    try {
      return await this.service.updateUberRequest({
        ...args,
        data: {
          ...args.data,

          job: args.data.job
            ? {
                connect: args.data.job,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UberRequest)
  async deleteUberRequest(
    @graphql.Args() args: DeleteUberRequestArgs
  ): Promise<UberRequest | null> {
    try {
      return await this.service.deleteUberRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Job, {
    nullable: true,
    name: "job",
  })
  async getJob(@graphql.Parent() parent: UberRequest): Promise<Job | null> {
    const result = await this.service.getJob(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
