/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UberRequestService } from "../uberRequest.service";
import { UberRequestCreateInput } from "./UberRequestCreateInput";
import { UberRequest } from "./UberRequest";
import { UberRequestFindManyArgs } from "./UberRequestFindManyArgs";
import { UberRequestWhereUniqueInput } from "./UberRequestWhereUniqueInput";
import { UberRequestUpdateInput } from "./UberRequestUpdateInput";

export class UberRequestControllerBase {
  constructor(protected readonly service: UberRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UberRequest })
  async createUberRequest(
    @common.Body() data: UberRequestCreateInput
  ): Promise<UberRequest> {
    return await this.service.createUberRequest({
      data: {
        ...data,

        job: data.job
          ? {
              connect: data.job,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        dropOffLocation: true,
        id: true,

        job: {
          select: {
            id: true,
          },
        },

        passenger: true,
        pickupLocation: true,
        requestTime: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UberRequest] })
  @ApiNestedQuery(UberRequestFindManyArgs)
  async uberRequests(@common.Req() request: Request): Promise<UberRequest[]> {
    const args = plainToClass(UberRequestFindManyArgs, request.query);
    return this.service.uberRequests({
      ...args,
      select: {
        createdAt: true,
        dropOffLocation: true,
        id: true,

        job: {
          select: {
            id: true,
          },
        },

        passenger: true,
        pickupLocation: true,
        requestTime: true,
        status: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UberRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async uberRequest(
    @common.Param() params: UberRequestWhereUniqueInput
  ): Promise<UberRequest | null> {
    const result = await this.service.uberRequest({
      where: params,
      select: {
        createdAt: true,
        dropOffLocation: true,
        id: true,

        job: {
          select: {
            id: true,
          },
        },

        passenger: true,
        pickupLocation: true,
        requestTime: true,
        status: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UberRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUberRequest(
    @common.Param() params: UberRequestWhereUniqueInput,
    @common.Body() data: UberRequestUpdateInput
  ): Promise<UberRequest | null> {
    try {
      return await this.service.updateUberRequest({
        where: params,
        data: {
          ...data,

          job: data.job
            ? {
                connect: data.job,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          dropOffLocation: true,
          id: true,

          job: {
            select: {
              id: true,
            },
          },

          passenger: true,
          pickupLocation: true,
          requestTime: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UberRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUberRequest(
    @common.Param() params: UberRequestWhereUniqueInput
  ): Promise<UberRequest | null> {
    try {
      return await this.service.deleteUberRequest({
        where: params,
        select: {
          createdAt: true,
          dropOffLocation: true,
          id: true,

          job: {
            select: {
              id: true,
            },
          },

          passenger: true,
          pickupLocation: true,
          requestTime: true,
          status: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
