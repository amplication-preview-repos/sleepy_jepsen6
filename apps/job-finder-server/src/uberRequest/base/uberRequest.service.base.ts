/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  UberRequest as PrismaUberRequest,
  Job as PrismaJob,
} from "@prisma/client";

export class UberRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UberRequestCountArgs, "select">
  ): Promise<number> {
    return this.prisma.uberRequest.count(args);
  }

  async uberRequests(
    args: Prisma.UberRequestFindManyArgs
  ): Promise<PrismaUberRequest[]> {
    return this.prisma.uberRequest.findMany(args);
  }
  async uberRequest(
    args: Prisma.UberRequestFindUniqueArgs
  ): Promise<PrismaUberRequest | null> {
    return this.prisma.uberRequest.findUnique(args);
  }
  async createUberRequest(
    args: Prisma.UberRequestCreateArgs
  ): Promise<PrismaUberRequest> {
    return this.prisma.uberRequest.create(args);
  }
  async updateUberRequest(
    args: Prisma.UberRequestUpdateArgs
  ): Promise<PrismaUberRequest> {
    return this.prisma.uberRequest.update(args);
  }
  async deleteUberRequest(
    args: Prisma.UberRequestDeleteArgs
  ): Promise<PrismaUberRequest> {
    return this.prisma.uberRequest.delete(args);
  }

  async getJob(parentId: string): Promise<PrismaJob | null> {
    return this.prisma.uberRequest
      .findUnique({
        where: { id: parentId },
      })
      .job();
  }
}
